[{"C:\\Users\\lukei\\Documents\\large-project\\client\\src\\index.js":"1","C:\\Users\\lukei\\Documents\\large-project\\client\\src\\App.js":"2","C:\\Users\\lukei\\Documents\\large-project\\client\\src\\pages\\Forgot.js":"3","C:\\Users\\lukei\\Documents\\large-project\\client\\src\\pages\\Login.js":"4","C:\\Users\\lukei\\Documents\\large-project\\client\\src\\pages\\Game.js":"5","C:\\Users\\lukei\\Documents\\large-project\\client\\src\\pages\\Home.js":"6","C:\\Users\\lukei\\Documents\\large-project\\client\\src\\pages\\Account.js":"7","C:\\Users\\lukei\\Documents\\large-project\\client\\src\\pages\\Verify.js":"8","C:\\Users\\lukei\\Documents\\large-project\\client\\src\\pages\\Changepassword.js":"9","C:\\Users\\lukei\\Documents\\large-project\\client\\src\\pages\\Signup.js":"10"},{"size":220,"mtime":1638132257016,"results":"11","hashOfConfig":"12"},{"size":1149,"mtime":1638682238319,"results":"13","hashOfConfig":"12"},{"size":9859,"mtime":1638924455213,"results":"14","hashOfConfig":"12"},{"size":5055,"mtime":1638924449002,"results":"15","hashOfConfig":"12"},{"size":370,"mtime":1638564558115,"results":"16","hashOfConfig":"12"},{"size":1813,"mtime":1638564558139,"results":"17","hashOfConfig":"12"},{"size":8381,"mtime":1638924389676,"results":"18","hashOfConfig":"12"},{"size":5862,"mtime":1638924449002,"results":"19","hashOfConfig":"12"},{"size":5725,"mtime":1638924399018,"results":"20","hashOfConfig":"12"},{"size":7405,"mtime":1638924449002,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"199edff",{"filePath":"24","messages":"25","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"26","messages":"27","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"28"},{"filePath":"29","messages":"30","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"31","messages":"32","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"33","messages":"34","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"35","messages":"36","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"37","messages":"38","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"39","messages":"40","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"41","messages":"42","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43"},"C:\\Users\\lukei\\Documents\\large-project\\client\\src\\index.js",[],"C:\\Users\\lukei\\Documents\\large-project\\client\\src\\App.js",[],"C:\\Users\\lukei\\Documents\\large-project\\client\\src\\pages\\Forgot.js",["44","45"],"import React, { useState } from 'react';\r\nimport {Paper, withStyles, Typography, Box, Button} from '@material-ui/core';\r\nimport Image from '../bg2.jpg';\r\nimport './Forgot.css';\r\nimport './login.css';\r\n\r\nlet strongPassword = new RegExp('(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.*[^A-Za-z0-9])(?=.{8,})')\r\n\r\nfunction validateEmail (emailAdress)\r\n{\r\n  let regexEmail = /^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$/;\r\n  if (emailAdress.match(regexEmail)) {\r\n    return true; \r\n  } else {\r\n    return false; \r\n  }\r\n}\r\n\r\nconst styles = {\r\n    paperContainer: {\r\n        backgroundPosition: '-10px -10px',\r\n        height: '100vh',\r\n        width: '100vw',\r\n        backgroundImage: `url(${Image})`,\r\n    },\r\n    font: {\r\n        fontFamily: '\"Sancreek\", Open Sans',\r\n    },\r\n    leftAlignNew: {\r\n        fontFamily: '\"Sancreek\", Open Sans',\r\n        transform: 'translateX(-43px)'\r\n    },\r\n    leftAlignVerify: {\r\n        fontFamily: '\"Sancreek\", Open Sans',\r\n        transform: 'translateX(-35px)'\r\n    },\r\n    leftAlignEmail: {\r\n        fontFamily: '\"Sancreek\", Open Sans',\r\n        transform: 'translateX(-55px)'\r\n    },\r\n    center: {\r\n        justifyContent: 'center',\r\n    },\r\n    leftAlign: {\r\n        fontFamily: '\"Sancreek\", Open Sans',\r\n        transform: 'translateX(-84px)'\r\n    },\r\n    alignitems: {\r\n        display: \"flex\",\r\n        flex: 1,\r\n        flexDirection: \"column\",\r\n        alignItems: \"center\",\r\n      },\r\n    buttons: {\r\n        fontSize: 12,\r\n        width: 207,\r\n        height: 60,\r\n        alignItems: 'center',\r\n        justifyContent: 'center',\r\n        backgroundColor: '#ffffff',\r\n        fontFamily: '\"Sancreek\", Open Sans',\r\n        '&:hover': {\r\n          backgroundColor: '#',\r\n          color: '#3c52b2',\r\n      },\r\n    },\r\n    inputText: {\r\n        height: 40,\r\n        width: 200,\r\n        display: \"flex\",\r\n        margin: 'auto',\r\n        alignItems: 'center',\r\n    }\r\n};\r\n\r\nconst WhiteTextTypography = withStyles({\r\n    root: {\r\n      color: \"#FFFFFF\"\r\n    }\r\n  })(Typography);\r\n\r\nfunction buildPath(route)\r\n{\r\n    return 'https://dungeonrun.herokuapp.com/' + route\r\n}\r\n\r\nconst Forgot = () => {\r\n    localStorage.clear();\r\n    \r\n    const [state, setState] = useState('email')\r\n    var email;\r\n    const [emailTemp, setEmail] = useState('')\r\n    const [username, setUsername] = useState('')\r\n    const [message, setMessage] = useState('')\r\n    var verify;\r\n    var password;\r\n    var verPassword;\r\n\r\n    const emailer = async event =>{\r\n\r\n        event.preventDefault();\r\n\r\n        setEmail(email.value);\r\n\r\n        if(!validateEmail (email.value))\r\n        {\r\n            setMessage('Invalid email.');\r\n            return;\r\n        }\r\n        \r\n        var obj = { email: email.value};\r\n        var js = JSON.stringify(obj);\r\n        \r\n        try {\r\n            const response = await fetch(buildPath('api/userFromEmail'),\r\n                { method: 'POST', body: js, headers: { 'Content-Type': 'application/json' } });\r\n\r\n            var res = JSON.parse(await response.text());\r\n\r\n            if(res.error === '1')\r\n            {\r\n                setMessage('Email not registered.');\r\n                return;\r\n            }\r\n            else\r\n                setUsername(res.username);\r\n\r\n            await fetch(buildPath('api/sendEmail'),\r\n                { method: 'POST', body: js, headers: { 'Content-Type': 'application/json' } });\r\n                \r\n            setMessage('')\r\n            setState('verify');\r\n        }\r\n        catch (e) {\r\n            console.log(e.toString());\r\n            return;\r\n        }\r\n    }\r\n\r\n    const doVerification = async event => {\r\n        event.preventDefault();\r\n\r\n        var obj = { username: username, verifyCode: parseInt(verify.value)};\r\n        var js = JSON.stringify(obj);\r\n\r\n        try {\r\n            const response = await fetch(buildPath('api/verifyCode'),\r\n                { method: 'POST', body: js, headers: { 'Content-Type': 'application/json' } });\r\n            var resp = JSON.parse(await response.text());\r\n\r\n            if(resp.error === '0')\r\n            {\r\n                setMessage('')\r\n                setState('changepassword');\r\n            }\r\n            else if(resp.error === '1')\r\n                setMessage('Invalid code.');\r\n\r\n        }\r\n        catch (e) {\r\n            console.log(e.toString());\r\n            return;\r\n        }\r\n    };\r\n\r\n    const changePassword = async event => {\r\n\r\n        var passwordTemp = password.value;\r\n        var verPasswordTemp = verPassword.value;\r\n\r\n        event.preventDefault();\r\n        \r\n        if(passwordTemp === \"\" || verPasswordTemp === \"\")\r\n            setMessage('All fields required.');\r\n        else if(passwordTemp !==  verPasswordTemp)\r\n            setMessage('Password fields must match.');\r\n        else if(!strongPassword.test(passwordTemp))\r\n            setMessage('Password not strong enough.');\r\n        else\r\n        {\r\n            setMessage('');\r\n            var obj = { username: username, newPass: passwordTemp};\r\n            var js = JSON.stringify(obj);\r\n            \r\n            try {\r\n                await fetch(buildPath('api/changePassword'),\r\n                    { method: 'POST', body: js, headers: { 'Content-Type': 'application/json' } });\r\n                    \r\n\r\n                obj = { email: emailTemp, password: passwordTemp};\r\n                js = JSON.stringify(obj);\r\n\r\n                const response = await fetch(buildPath('api/login'),\r\n                { method: 'POST', body: js, headers: { 'Content-Type': 'application/json' } });\r\n\r\n                var res = JSON.parse(await response.text());\r\n                \r\n                var user = {username: username, id: res.id, email: emailTemp, verify: true}\r\n                localStorage.removeItem('user_data');\r\n                localStorage.setItem('user_data', JSON.stringify(user));\r\n\r\n                window.location.href = '/Verify';\r\n            }\r\n            catch (e) {\r\n                console.log(e.toString());\r\n                return;\r\n            }\r\n        }\r\n\r\n    };\r\n\r\n    if(state === 'email')\r\n    {\r\n        return(\r\n            <Paper style={styles.paperContainer}>\r\n                <Box pt={10}>\r\n                <WhiteTextTypography style={styles.font} variant=\"h1\" align=\"center\" > \r\n                    FORGOT PASSWORD\r\n                </WhiteTextTypography>\r\n                </Box>\r\n                <form onSubmit={emailer}>\r\n                    <Box pt={10}>\r\n                    <WhiteTextTypography  align=\"center\" style={styles.leftAlignEmail}> \r\n                        ENTER GMAIL:\r\n                    </WhiteTextTypography>\r\n                    <input style={styles.inputText} type=\"text\" ref={(c) => email = c} />\r\n                    </Box>\r\n                    <Box pt={3}>\r\n                    <div style={styles.alignitems}>\r\n                        <Button type=\"submit\" class=\"raise\" value=\"EMAIL\" onClick={emailer}>Enter</Button>\r\n                    </div>\r\n                    </Box>\r\n                </form>\r\n                <h4 style={{textAlign:\"center\", color:'white'}}>{message}</h4>\r\n            </Paper>\r\n            )\r\n    }\r\n    else if(state === 'changepassword')\r\n    {\r\n        return(\r\n            <Paper style={styles.paperContainer}>\r\n                    <Box pt={10}>\r\n                    <WhiteTextTypography style={styles.font} variant=\"h1\" align=\"center\" > \r\n                        FORGOT PASSWORD\r\n                    </WhiteTextTypography>\r\n                </Box>\r\n                <form onSubmit={changePassword}>\r\n                    <Box pt={5}>\r\n                    <WhiteTextTypography  align=\"center\" style={styles.leftAlignNew}> \r\n                        NEW PASSWORD:\r\n                    </WhiteTextTypography>\r\n                    <input style={styles.inputText} type=\"password\" ref={(c) => password = c} />\r\n                    </Box>\r\n                    <WhiteTextTypography align=\"center\" style={styles.leftAlignVerify} > \r\n                        VERIFY PASSWORD:\r\n                    </WhiteTextTypography>\r\n                    <input style={styles.inputText} type=\"password\" ref={(c) => verPassword = c} />\r\n                    <div style={styles.alignitems}>\r\n                        <Box pt={3}>\r\n                        <Button type=\"submit\" class=\"raise\" value=\"PASSWORDCHANGE\" style={styles.buttons} onClick={changePassword}> CHANGE PASSWORD</Button>\r\n                        </Box>\r\n                    </div>\r\n                </form>\r\n                <h4 style={{textAlign:\"center\", color:'white'}}>{message}</h4>\r\n            </Paper>\r\n        )\r\n    }\r\n    else if(state === 'verify')\r\n    {\r\n        return(\r\n            <Paper style={styles.paperContainer}>\r\n            <Box pt={10}>\r\n                <WhiteTextTypography  style={styles.font} variant=\"h1\" align=\"center\">\r\n                    FORGOT PASSWORD\r\n                </WhiteTextTypography>\r\n            </Box>\r\n            \r\n            <Box pt={5}>\r\n                <WhiteTextTypography variant=\"p\" textAlign=\"center\" style={styles.font} >\r\n                </WhiteTextTypography>\r\n            </Box>\r\n            <form onSubmit={doVerification}>\r\n                <Box pt={5}>\r\n                <WhiteTextTypography align=\"center\" style={styles.leftAlign}> \r\n                    CODE:\r\n                </WhiteTextTypography>\r\n                <input style={styles.inputText} type=\"number\" ref={(c) => verify = c} />\r\n                </Box>\r\n                <div style={styles.alignitems}>\r\n                    <Box pt={3}>\r\n                    <Button type=\"submit\" class=\"raise\" value=\"VERIFY\" onClick={doVerification}>SUBMIT</Button>\r\n                    </Box>\r\n                </div>\r\n            </form>\r\n            <h4 style={{textAlign:\"center\", color:'white'}}>{message}</h4>\r\n        </Paper>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nexport default Forgot;","C:\\Users\\lukei\\Documents\\large-project\\client\\src\\pages\\Login.js",[],"C:\\Users\\lukei\\Documents\\large-project\\client\\src\\pages\\Game.js",[],"C:\\Users\\lukei\\Documents\\large-project\\client\\src\\pages\\Home.js",[],"C:\\Users\\lukei\\Documents\\large-project\\client\\src\\pages\\Account.js",[],"C:\\Users\\lukei\\Documents\\large-project\\client\\src\\pages\\Verify.js",[],"C:\\Users\\lukei\\Documents\\large-project\\client\\src\\pages\\Changepassword.js",[],"C:\\Users\\lukei\\Documents\\large-project\\client\\src\\pages\\Signup.js",["46","47"],"import React, { useState } from 'react';\r\nimport Image from '../bg2.jpg';\r\nimport { Paper, Typography, withStyles, Box, Button } from '@material-ui/core';\r\nlet strongPassword = new RegExp('(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.*[^A-Za-z0-9])(?=.{8,})')\r\n\r\nfunction validateEmail (emailAdress)\r\n{\r\n  let regexEmail = /^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$/;\r\n  if (emailAdress.match(regexEmail)) {\r\n    return true; \r\n  } else {\r\n    return false; \r\n  }\r\n}\r\n\r\nconst styles = {\r\n    paperContainer: {\r\n        backgroundPosition: '-10px -10px',\r\n        height: '100vh',\r\n        width: '100vw',\r\n        backgroundImage: `url(${Image})`,\r\n    },\r\n    font: {\r\n        fontFamily: '\"Sancreek\", Open Sans',\r\n    },\r\n    leftAlignEmail: {\r\n        fontFamily: '\"Sancreek\", Open Sans',\r\n        transform: 'translateX(-79px)'\r\n    },\r\n    leftAlignPassword: {\r\n        fontFamily: '\"Sancreek\", Open Sans',\r\n        transform: 'translateX(-60px)'\r\n    },\r\n    leftAlignVerify: {\r\n        fontFamily: '\"Sancreek\", Open Sans',\r\n        transform: 'translateX(-35px)'\r\n    },\r\n    center: {\r\n        justifyContent: 'center',\r\n    },\r\n    alignitems: {\r\n        display: \"flex\",\r\n        flex: 1,\r\n        flexDirection: \"column\",\r\n        alignItems: \"center\",\r\n      },\r\n    buttons: {\r\n        height: 60,\r\n        width: 200,\r\n        fontSize: 12,\r\n        alignItems: 'center',\r\n        backgroundColor: '#ffffff',\r\n        fontFamily: '\"Sancreek\", Open Sans',\r\n        '&:hover': {\r\n          backgroundColor: '#',\r\n          color: '#3c52b2',\r\n      },\r\n    },\r\n    inputText: {\r\n        height: 40,\r\n        width: 200,\r\n        display: \"flex\",\r\n        margin: 'auto',\r\n        alignItems: 'center',\r\n    }\r\n};\r\n\r\nconst WhiteTextTypography = withStyles({\r\n    root: {\r\n      color: \"#FFFFFF\"\r\n    }\r\n  })(Typography);\r\n\r\nfunction buildPath(route)\r\n{\r\n    return 'https://dungeonrun.herokuapp.com/' + route\r\n}\r\n\r\n\r\nconst SignUp = () =>{\r\n\r\n    localStorage.clear();\r\n    const [message, setMessage] = useState('')\r\n\r\n    var email;\r\n    var username;\r\n    var password;\r\n    var verifyPassword;\r\n\r\n    const doSignup = async event => {\r\n        \r\n        event.preventDefault();\r\n\r\n        var emailTemp = email.value;\r\n        var usernameTemp = username.value;\r\n        var passwordTemp = password.value;\r\n        var verifyPasswordTemp = verifyPassword.value;\r\n\r\n\r\n        if(emailTemp !== \"\" && validateEmail (emailTemp))\r\n        {\r\n            var obj = { email: emailTemp};\r\n            var js = JSON.stringify(obj);\r\n\r\n            try {\r\n                const response = await fetch(buildPath('api/userExists'),\r\n                    { method: 'POST', body: js, headers: { 'Content-Type': 'application/json' } });\r\n                var res = JSON.parse(await response.text());\r\n\r\n                if(res.exists === 1)\r\n                {\r\n                    setMessage('Account with this email already exists.');\r\n                    return;\r\n                }\r\n            }\r\n            catch (e) {\r\n                console.log(e.toString());\r\n                return;\r\n            }\r\n        }\r\n\r\n        if(emailTemp === \"\" || usernameTemp === \"\" || passwordTemp === \"\" || verifyPasswordTemp === \"\")\r\n            setMessage('All fields required.');\r\n        else if(!validateEmail (emailTemp))\r\n            setMessage('Invalid email.');\r\n        else if(passwordTemp !==  verifyPasswordTemp)\r\n            setMessage('Password fields must match.');\r\n        else if(!strongPassword.test(passwordTemp))\r\n            setMessage('Password not strong enough.');\r\n        else\r\n        {\r\n            setMessage('');\r\n\r\n            obj = { username: usernameTemp};\r\n            js = JSON.stringify(obj);\r\n\r\n            try {\r\n                const response = await fetch(buildPath('api/userExists'),\r\n                    { method: 'POST', body: js, headers: { 'Content-Type': 'application/json' } });\r\n                var respo = JSON.parse(await response.text());\r\n\r\n                if(respo.exists === 1)\r\n                {\r\n                    setMessage('Username already exists.');\r\n                    return;\r\n                }\r\n            }\r\n            catch (e) {\r\n                console.log(e.toString());\r\n                return;\r\n            }\r\n\r\n            obj = { username: usernameTemp, email: emailTemp, password: passwordTemp};\r\n            js = JSON.stringify(obj);\r\n\r\n            try {\r\n                const response = await fetch(buildPath('api/registerUser'),\r\n                    { method: 'POST', body: js, headers: { 'Content-Type': 'application/json' } });\r\n                \r\n                res = JSON.parse(await response.text());\r\n\r\n                var user = {username: usernameTemp, id: res.id, email: emailTemp, verify: false}\r\n                localStorage.removeItem('user_data');\r\n                localStorage.setItem('user_data', JSON.stringify(user));\r\n                \r\n\r\n                obj = { email: emailTemp};\r\n                js = JSON.stringify(obj);\r\n\r\n                try {\r\n                    await fetch(buildPath('api/sendEmail'),\r\n                        { method: 'POST', body: js, headers: { 'Content-Type': 'application/json' } });\r\n                }\r\n                catch (e) {\r\n                    console.log(e.toString());\r\n                    return;\r\n                }\r\n                \r\n\r\n                window.location.href = '/Verify';\r\n            }\r\n            catch (e) {\r\n                console.log(e.toString());\r\n                return;\r\n            }\r\n        }\r\n    };\r\n\r\n    return (\r\n        <Paper style={styles.paperContainer}>\r\n            <Box pt={10}>\r\n                <WhiteTextTypography style={styles.font} variant=\"h1\" align=\"center\">\r\n                    JOIN DUNGEON RUN\r\n                </WhiteTextTypography>\r\n            </Box>\r\n            <form onSubmit={doSignup}>\r\n                <Box pt={10}>\r\n                <WhiteTextTypography  align=\"center\" style={styles.leftAlignEmail}> \r\n                    EMAIL:\r\n                </WhiteTextTypography>\r\n                <input style={styles.inputText} type=\"text\" ref={(c) => email = c} />\r\n                </Box>\r\n\r\n                <WhiteTextTypography  align=\"center\" style={styles.leftAlignPassword}> \r\n                    USERNAME:\r\n                </WhiteTextTypography>\r\n                <input style={styles.inputText} type=\"text\" ref={(c) => username = c} />\r\n\r\n                <WhiteTextTypography align=\"center\" style={styles.leftAlignPassword} > \r\n                    PASSWORD:\r\n                </WhiteTextTypography>\r\n                <input type=\"password\" style={styles.inputText} ref={(c) => password = c} />\r\n\r\n                <WhiteTextTypography align=\"center\" style={styles.leftAlignVerify} > \r\n                    VERIFY PASSWORD:\r\n                </WhiteTextTypography>\r\n                <input type=\"password\" style={styles.inputText} ref={(c) => verifyPassword = c} />\r\n                \r\n                <div style={styles.alignitems}>\r\n                    <Box pt={3}>\r\n                    <Button type=\"submit\" id=\"signupButton\" class=\"raise\" value=\"SIGNUP\" onClick={doSignup} style={styles.buttons}>CREATE ACCOUNT</Button>\r\n                    </Box>\r\n                </div>\r\n            </form>\r\n            <h4 style={{textAlign:\"center\", color:'white'}}>{message}</h4>\r\n        </Paper>\r\n    )\r\n}\r\n\r\n\r\nexport default SignUp;",{"ruleId":"48","severity":1,"message":"49","line":11,"column":27,"nodeType":"50","messageId":"51","endLine":11,"endColumn":28,"suggestions":"52"},{"ruleId":"48","severity":1,"message":"49","line":11,"column":43,"nodeType":"50","messageId":"51","endLine":11,"endColumn":44,"suggestions":"53"},{"ruleId":"48","severity":1,"message":"49","line":8,"column":27,"nodeType":"50","messageId":"51","endLine":8,"endColumn":28,"suggestions":"54"},{"ruleId":"48","severity":1,"message":"49","line":8,"column":43,"nodeType":"50","messageId":"51","endLine":8,"endColumn":44,"suggestions":"55"},"no-useless-escape","Unnecessary escape character: \\..","Literal","unnecessaryEscape",["56","57"],["58","59"],["60","61"],["62","63"],{"messageId":"64","fix":"65","desc":"66"},{"messageId":"67","fix":"68","desc":"69"},{"messageId":"64","fix":"70","desc":"66"},{"messageId":"67","fix":"71","desc":"69"},{"messageId":"64","fix":"72","desc":"66"},{"messageId":"67","fix":"73","desc":"69"},{"messageId":"64","fix":"74","desc":"66"},{"messageId":"67","fix":"75","desc":"69"},"removeEscape",{"range":"76","text":"77"},"Remove the `\\`. This maintains the current functionality.","escapeBackslash",{"range":"78","text":"79"},"Replace the `\\` with `\\\\` to include the actual backslash character.",{"range":"80","text":"77"},{"range":"81","text":"79"},{"range":"82","text":"77"},{"range":"83","text":"79"},{"range":"84","text":"77"},{"range":"85","text":"79"},[369,370],"",[369,369],"\\",[385,386],[385,385],[322,323],[322,322],[338,339],[338,338]]